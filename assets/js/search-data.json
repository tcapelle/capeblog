{
  
    
        "post0": {
            "title": "The Devil lives in the details",
            "content": "Yesterday I was refactoring some code to put on our production code base. It is a simple image classifier trained with fastai. In our deployement env we are not including fastai as requirements and rely only on pure pytorch to process the data and make the inferece. (I am waiting to finally be able to install only the fastai vision part, without the NLP dependencies, this is coming soon, probably in fastai 2.3, at least it is in Jeremy&#39;s roadmap). So, I have to make the reading and preprocessing of images as close as possible as fastai Transform pipeline, to get accurate model outputs. . Let&#39;s take a quick look on the preprocessing used for training and there corresponding torch version with the new tensor API as shown here . A simple example . Let&#39;s make a simple classifier on the PETS dataset, for more details this comes from the fastai tutorial . from fastai.vision.all import * set_seed(2021) . let&#39;s grab the data . path = untar_data(URLs.PETS) files = get_image_files(path/&quot;images&quot;) def label_func(f): return f[0].isupper() dls = ImageDataLoaders.from_name_func(path, files, label_func, item_tfms=Resize((256, 192))) . A learner it is just a wrapper of Dataloaders and the model. We will grab an imagene pretrained resnet18, we don&#39;t really need to train it to illustrate the problem. . learn = cnn_learner(dls, resnet18) . and grab one image (load_image comes from fastai and returns a memory loaded PIL.Image.Image) . fname = files[1] img = load_image(fname) img . learn.predict(fname) . (&#39;False&#39;, tensor(0), tensor([0.9191, 0.0809])) . Let&#39;s understand what is happening under the hood: . and we can call the prediction using fastai predict method, this will apply the same transforms as to the validation set. . create PIL image | Transform the image to pytorch Tensor | Scale values by 255 | Normalize with imagenet stats | . doing this by hand is extracting the preprocessing transforms: . dls.valid.tfms . (#2) [Pipeline: PILBase.create,Pipeline: partial -&gt; Categorize -- {&#39;vocab&#39;: None, &#39;sort&#39;: True, &#39;add_na&#39;: False}] . dls.valid.after_item . Pipeline: Resize -- {&#39;size&#39;: (192, 256), &#39;method&#39;: &#39;crop&#39;, &#39;pad_mode&#39;: &#39;reflection&#39;, &#39;resamples&#39;: (2, 0), &#39;p&#39;: 1.0} -&gt; ToTensor . dls.valid.after_batch . Pipeline: IntToFloatTensor -- {&#39;div&#39;: 255.0, &#39;div_mask&#39;: 1} -&gt; Normalize -- {&#39;mean&#39;: tensor([[[[0.4850]], [[0.4560]], [[0.4060]]]]), &#39;std&#39;: tensor([[[[0.2290]], [[0.2240]], [[0.2250]]]]), &#39;axes&#39;: (0, 2, 3)} . Let&#39;s put all transforms together on a fastcore Pipeline . preprocess = Pipeline([Transform(PILImage.create), Resize((256,192)), ToTensor, IntToFloatTensor, Normalize.from_stats(*imagenet_stats)]) . we can then preprocess the image: . tfm_img = preprocess(fname) tfm_img.shape . torch.Size([1, 3, 256, 192]) . and we get the exact same predictions as before . with torch.no_grad(): preds = model(tfm_img).softmax(1) preds . tensor([[0.9191, 0.0809]]) . Using torchvision preprocessing . Now let&#39;s try to replace fastai transforms with torchvision . import torchvision.transforms as T . pil_image = load_image(fname) pil_image . type(pil_image) . PIL.Image.Image . let&#39;s first resize the image, we can do this directly over the PIL.Image.Image or using T.Resize that works both on IPIL images or Tensors . resize = T.Resize([256, 192]) res_pil_image = res(pil_image) . we can then use T.ToTensor this will actually scale by 255 and transform to tensor, it is equivalent to both ToTensor + IntToFloatTensor from fastai. . timg = T.ToTensor()(res_pil_image) . then we have to normalize it: . norm = T.Normalize(*imagenet_stats) nimg = norm(timg).unsqueeze(0) . and we get almost and identical results! ouff..... . with torch.no_grad(): preds = model(nimg).softmax(1) preds . tensor([[0.9109, 0.0891]]) . Let&#39;s try this new Tensor based API that torchvision introduced on v0.8 then! . Torchvision new Tensor API . import torchvision.transforms as T from torchvision.io.image import read_image . timg = read_image(str(fname)) # it is sad that it does not support pathlib objects in 2021... . resize = T.Resize([256, 192]) res_timg = res(timg) . we have to scale it, we have a new transform to do this: . scale = T.ConvertImageDtype(torch.float) scaled_timg = scale(res_timg) . norm = T.Normalize(*imagenet_stats) nimg = norm(scaled_timg).unsqueeze(0) . Ok, the results is pretty different... . with torch.no_grad(): preds = model(nimg).softmax(1) preds . tensor([[0.9844, 0.0156]]) . if you trained your model with the old API, reading images using PIL you may find yourself lost as why the models is performing poorly. My classifier was predicting completely the opossite for some images, and that&#39;s why I realized that something was wrong! . Let&#39;s dive what is happening... . Comparing Resizing methods . T.Resize on PIL image vs Tensor Image . We will use fastai magic to make the loading and showing of tensor images easy . resize = T.Resize([256, 192]) . pil_img = load_image(fname) res_pil_img = cast(image2tensor(resize(pil_img)), TensorImage) tensor_img = read_image(str(fname)) res_tensor_img = cast(resize(tensor_img), TensorImage) . show_images([res_pil_img, res_tensor_img], figsize=(10,5), titles=[&#39;PIL&#39;, &#39;Tensor&#39;]) . Let&#39;s zoome and plot . show_images([res_pil_img[:,20:80, 30:100], res_tensor_img[:,20:80, 30:100]], figsize=(10,5), titles=[&#39;PIL&#39;, &#39;Tensor&#39;]) . Extra: What if I want to use OpenCV? . import cv2 . opencv opens directly an array . img_cv = cv2.imread(str(fname)) res_img_cv = cv2.resize(img_cv, (256,192), interpolation=cv2.INTER_LINEAR) . BGR to RGB, and channel first. . res_img_cv = res_img_cv.transpose((2,0,1))[::-1,:,:].copy() . timg_cv = cast(res_img_cv, TensorImage) timg_cv.shape . torch.Size([3, 192, 256]) . timg_cv[:,20:80, 30:100].show(figsize=(8,8)) . &lt;AxesSubplot:&gt; . pretty bad also... . learn.predict(timg_cv) . (&#39;False&#39;, tensor(0), tensor([0.9925, 0.0075])) . with INTER_AREA flag . This method is closer to PIL image resize, as it has a kernel that smooths the image. . img_cv_area = cv2.imread(str(fname)) img_cv_area = cv2.resize(img_cv_area, (256,192), interpolation=cv2.INTER_AREA) . img_cv_area = img_cv_area.transpose((2,0,1))[::-1,:,:].copy() . timg_cv_area = cast(img_cv_area, TensorImage) . timg_cv_area[:,20:80, 30:100].show(figsize=(8,8)) . &lt;AxesSubplot:&gt; . kinda of better... . learn.predict(timg_cv_area) . (&#39;False&#39;, tensor(0), tensor([0.9882, 0.0118])) . Conclusions . Ideally, deploy the model with the exact same transforms as it was validated. Or at least, check that the preformance does not degrade. I would like to see more consistency between both API in pure pytorch, as the user is pushed to use the new pillow-free pipeline, but results are not consistent. Resize is a fundamental part of the image preprocessing in most user cases. . There is an issue open on the torchvision github about this. | Also one about the difference between PIL and openCV here | . This was pretty frustrating, as it was not obviuos where the model was failing. .",
            "url": "https://tcapelle.github.io/capeblog/2021/02/26/image_resizing.html",
            "relUrl": "/2021/02/26/image_resizing.html",
            "date": " • Feb 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tcapelle.github.io/capeblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tcapelle.github.io/capeblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tcapelle.github.io/capeblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tcapelle.github.io/capeblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}